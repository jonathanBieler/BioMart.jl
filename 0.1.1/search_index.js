var documenterSearchIndex = {"docs":
[{"location":"#BioMart.jl","page":"Home","title":"BioMart.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Make simple requests to Ensembl BioMart database.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using BioMart\nimport BioMart: Dataset, Filters, Attributes\n\nBioMart.query(\n    Dataset(\"hsapiens_gene_ensembl\"),\n    Filters(\n        ensembl_gene_id = \"ENSG00000146648\", \n        chromosome_name = \"7\"\n    ),\n    Attributes(\n        \"external_gene_name\",\n        \"strand\"\n    ),\n)\n\n1×2 DataFrames.DataFrame\n│ Row │ Gene name │ Strand │\n│     │ String    │ Int64  │\n├─────┼───────────┼────────┤\n│ 1   │ EGFR      │ 1      │","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]","category":"page"},{"location":"#Types-and-methods","page":"Home","title":"Types and methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [BioMart]\nPrivate = true\nPages   = [\"Query.jl\", \"Attribute.jl\", \"Filter.jl\", \"Database.jl\", \"Dataset.jl\"]","category":"page"},{"location":"#BioMart.Query-Tuple{BioMart.Dataset, Vararg{Any}}","page":"Home","title":"BioMart.Query","text":"Query(dataset::Dataset, args...)\n\nBuild a Query for the given Dataset and combination of Filters and Attributes. An Interval from GenomicFeatures can also be provided to filter by genomic position.\n\nA Query build the request in XML format but does not execute it. To do so you can call BioMart.execute or directly call the Query object.\n\nTo build and execute a Query at once use BioMart.query.\n\nExample:\n\nq = BioMart.Query(\n    BioMart.Dataset(\"maj_gene_ensembl\"),\n    Interval(\"1\", 1, 200000),\n    BioMart.Attribute(\"external_gene_name\"),\n    BioMart.Attributes(\"ensembl_gene_id\", \"ensembl_transcript_id\", \"strand\"),\n    BioMart.Filter(strand = \"1\")\n)\nq() #BioMart.execute(q)\n\n\n\n\n\n","category":"method"},{"location":"#BioMart.execute-Tuple{BioMart.Query}","page":"Home","title":"BioMart.execute","text":"execute(q::Query)\n\nExectute a Query and returns a DataFrame with the results.\n\n\n\n\n\n","category":"method"},{"location":"#BioMart.query-Tuple","page":"Home","title":"BioMart.query","text":"query(args...)\n\nBuild a Query using args, exectute it immediately and returns the results.\n\n\n\n\n\n","category":"method"},{"location":"#BioMart.Attribute","page":"Home","title":"BioMart.Attribute","text":"struct Attribute\n    name::String\nend\n\nSpecify an attribute to be returned by the query.\n\nExample :\n\nBioMart.Attribute(\"external_gene_name\")\n\n\n\n\n\n","category":"type"},{"location":"#BioMart.Attributes-Tuple","page":"Home","title":"BioMart.Attributes","text":"Attributes(args...)\n\nSpecify a list of attributes to be returned by the query.\n\nExample :\n\nBioMart.Attributes(\n    \"external_gene_name\",\n    \"strand\"\n)\n\n\n\n\n\n","category":"method"},{"location":"#BioMart.Filter","page":"Home","title":"BioMart.Filter","text":"struct Filter\n    name::String\n    value::String\nend\n\nSpecify a filter to be applied to the query.\n\nExamples :\n\nBioMart.Filter(ensembl_gene_id = \"ENSG00000146648\")\nBioMart.Filter(\"ensembl_gene_id\", \"ENSG00000146648\")\n\n\n\n\n\n","category":"type"},{"location":"#BioMart.Filters-Tuple{}","page":"Home","title":"BioMart.Filters","text":"BioMart.Filters(;args...)\n\nSpecify a list of filters to be applied to the query. \n\nExample :\n\nBioMart.Filters(\n    ensembl_gene_id = \"ENSG00000146648\", \n    chromosome_name = \"7\"\n)\n\n\n\n\n\n","category":"method"},{"location":"#BioMart.databases-Tuple{}","page":"Home","title":"BioMart.databases","text":"BioMart.databases()\n\nList the available databases.\n\n\n\n\n\n","category":"method"},{"location":"#BioMart.collect_elems-Tuple{Any, Any}","page":"Home","title":"BioMart.collect_elems","text":"go recursively over the XML and collect AttributeDescriptions\n\n\n\n\n\n","category":"method"},{"location":"#BioMart.datasets-Tuple{BioMart.Database}","page":"Home","title":"BioMart.datasets","text":"BioMart.datasets(database::Database)\nBioMart.datasets(database::String)\n\nList the datasets available for a given database.\n\nExamples : \n\nBioMart.datasets(\"ENSEMBL_MART_ENSEMBL\")\n\ndbs = BioMart.databases()\nBioMart.datasets(dbs[1])\n\n\n\n\n\n","category":"method"},{"location":"#BioMart.list_attributes-Tuple{String}","page":"Home","title":"BioMart.list_attributes","text":"BioMart.list_attributes(dataset::Dataset)\nBioMart.list_attributes(dataset::String)\n\nList the attributes available for a given dataset.\n\nExamples : \n\nBioMart.list_attributes(\"hsapiens_gene_ensembl\")\n\n\n\n\n\n","category":"method"},{"location":"#Internals","page":"Home","title":"Internals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Currently only calls to databases and datasets are cached in memory using Memoization.jl since memoization seems rather slow on queries.","category":"page"}]
}
